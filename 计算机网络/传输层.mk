#### TCP提供可靠信息传输的方式
+ 序号
+ 确认报文段(ACK)
+ 超时重传/快速重传

#### 给因特网提供的服务
+ 拥塞控制
1. 慢启动：拥塞窗口cwnd设置为1个MSS，并且每当传输的报文段首次被确认就增加一个MSS或者说每过一个往返时间RTT就将cwnd的值翻倍。
2. 拥塞避免模式：每个RTT只将cwnd的值增加一个MSS。
3. 出现超时重传，将拥塞窗口设置为1，并将慢启动阈值ssthresh置为拥塞窗口值的一半。

4. 检测到三个冗余的ACK报文段，执行快速重传并进入快速恢复状态。将cwnd的值减半，并加上3个MSS，将ssthresh的值设置为cwnd的一半。

5. 快速恢复：对于引起TCP进入快速恢复状态的缺失报文段，对收到的每个冗余的ACK，cwnd的值增加一个MSS。最终，当对丢失报文段的一个ACK到达时，TCP在降低cwnd后进入拥塞避免状态。



### 二、探索协议栈和网卡
本章内容：
+ 创建套接字：介绍协议栈的内部结构、套接字的实体、以及创建套接字的操作过程。
+ 连接服务器
+ 收发数据 (重传)
+ 从服务器断开连接并删除套接字
+ IP与以太网的包收发操作
+ 用UDP协议收发数据的操作

#### 2.1 创建套接字

+ UDP套接字是由一个二元组来全面标识：目的IP地址和一个目的端口号，不同的源地址或源端口号，相同目的地址和目的端口号对应同一个目的套接字，定向到同一个进程。
+ TCP套接字是由一个四元组来标志：源IP地址，源端口号，目的IP地址和目的端口号。不同的源地址或源端口号，相同目的地址和目的端口号对应同两个不同目的套接字，定向到同两个不同进程。

##### 2.1.1 协议栈的内部结构
![](./S1_figure/协议栈结构.JPG)

TCP和UDP: 
+ 浏览器、邮件等一般应用程序收发数据时用 TCP； 
+ DNS 查询等收发较短的控制数据时用 UDP

IP:
+ ICMP用于告知网络包传送过程中产生的错误以及各种控制消息
+ ARP用于根据IP地址查询相应的以太网MAC地址 

##### 2.1.2 套接字的实体就是通信控制信息
存放控制信息的内存空间 (里记录了用于 控制通信操作的控制信息，例如通信对象的IP地址、端口号、通信操作的 进行状态等) 就是套接字的实体

协议栈是根据套接字中记录的控制信息来工作.

+ windows可以使用netstat 命令显示套接字内容

##### 2.1.3 调用socket时的操作
+ 创建套接字时，首先分配一个套接字所需的内存空间，然后向其中写入初始状态。
+ 将表示这个套接字的描述符告知应用程序。应用程序在向协议栈进行收发数据委托时就需要提 供这个描述符。

#### 2.2 连接服务器
##### 2.2.1 连接的意思
连接实际上是通信双方交流控制信息。

##### 2.2.2负责保存控制信息的头部
控制信息大体分为两类；
+ 头部中记录的信息。
TCP的头部信息：
![](./S1_figure/TCP头部信息.JPG)
+ 套接字（协议栈中的内存空间）中记录的信息。
例如，Windows和 Linux操作系统的内部结构不同，协议栈的实现方式不同，必要的控制信息也就不同

##### 2.2.3 连接操作的实际过程
三次握手：

#### 2.3 收发数据
+ 缓存区、计时器
+ MTU：表示一个网络包的最大长度(一般是1500字节)。
+ MSS： 一个数据包中所能容纳的最大数据长度。

##### 2.3.2 对较大数据进行拆分
##### 2.3.3 使用ACK号确认数据包已收到
+ 通过“序号”和“ACK 号”可以确认接收方是否收到了网络包
##### 2.3.4 根据数据包平均往返时间调整等待时间：TCP会在发送数据 的过程中持续测量ACK号的返回时间，如果ACK号返回变慢，则相应 延长等待时间；相对地，如果ACK号马上就能返回，则相应缩短等待 时间 
##### 2.3.5 使用窗口有效管理ACK号
+ 滑动窗口
为防止缓冲区溢出造成的丢包：接收方需要告诉发送方自己最多能接收多少数据， 然后发送方根据这个值对数据发送操作进行控制，这就是滑动窗口方式的 基本思路。
![](./S1_figure/滑动窗口与接收缓冲区.JPG) 

##### 2.3.6 ACK与窗口的合并
##### 2.3.7 接收HTTP响应消息

#### 2.4 从服务器断开并删除套接字
+ 四次挥手



#### 2.5 IP与以太网的包收发操作
+ 路由器根据目标地址判断下一个路由器的位置 (IP协议，使用IP头部)
路由器中有一张路由表
+ 集线器在子网中将网络包传输到下一个路由 (以太网协议，使用MAC头部)
集线器里有一张用于以太网协议的表
##### 2.5.2 包收发操作概览
包收发操作的起点：TCP模块委托IP模块发送包的操作。传给IP模块的数据：TCP头部和数据以及指定通信对象的IP地址。

IP模块负责添加如下两个头部
（1） MAC 头部：以太网用的头部，包含 MAC 地址 
（2） IP 头部：IP 用的头部，包含 IP 地址

<u>无论要收发的包是控制包还是数据包，IP对各种类型的包的收 发操作都是相同的</u>

##### 2.5.3 生成包含接收方IP地址的IP头部
IP头部内容：
![](./S1_figure/IP头部信息.JPG)
<u>IP 头部的“接收方 IP 地址”填写通信对象的</u>
网卡根据客户端的路由表来进行判断

##### 2.5.4 生成以太网用的MAC头部
MAC头部字段：
![](./S1_figure/MAC头部.JPG)

问题：接收方MAC地址如何确定？
使用IP地址查询MAC地址的操作。

##### 2.5.5 通过ARP查询目标路由器的MAC地址
使用ARP缓存，若盖目标路由器的MAC地址不存在，则使用：
使用ARP协议：利用广播方法
![](./S1_figure/用ARP查询MAC地址.JPG)

缓存问题：当IP地址发生变化时，ARP缓存的内容就会和现实发生差异。
解决办法：，ARP缓存中的值 在经过一段时间后会被删除，一般这个时间在几分钟左右。

##### 2.5.6 以太网的基本知识
当一台计算机发送信号时，信号就会通过网线流过整个网络，最终到达所有的设备。
与接收者地址匹配的 设备就接收这个包，其他的设备则丢弃这个包，
目前使用的交换式集线器：信号只会流到根据MAC地址指定的设备，而不会到达其他设备了。

##### 2.5.7 将IP包转换成电或光信号发送出去。

##### 将服务器的响应包从IP传递给TCP
若服务器返回的包的接收方IP地址和客户端网卡的地址一致，检查确认之后
我们就可以接收这个包了。若包是分片的，IP模块还需要将它们还原成原始的包。

若接收方IP地址不是自己的地址，不接受该包。此外IP模块会通过ICMP消息将错误告知发送方
ICMP规定了各种类型的消息：
![](./S1_figure/ICMP包的消息.JPG)

#### 2.6 UDP协议的收发操作
##### 2.6.1 不需要重发的数据用UDP发送更高效
TCP：为了实现可靠性。并且为了实现高效的传输，要避免重发已经送达的包，而是只重发那些出错或者未送达的包。
UDP：数据很短，只需要一个包。考虑用UDP. 不可靠的。

UDP没有TCP的接收确认、窗口等机制，在收发数据之前也不需要交换控制信息，即不需要建立和断开连接的步骤。
知识单纯的发送包而已。若应用程序收不到对方的回复，会重新发送一遍数据。

##### 2.6.2 音频和视频数据